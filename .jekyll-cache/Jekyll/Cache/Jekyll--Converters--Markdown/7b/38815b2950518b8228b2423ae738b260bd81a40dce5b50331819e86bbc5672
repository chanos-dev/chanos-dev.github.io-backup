I"(<h2 id="c-singleton-pattern"><center>[C#] Singleton Pattern</center></h2>

<blockquote>
  <p><a href="https://github.com/chanos-dev/blogcode/tree/master/21-0309">Git Source</a></p>
</blockquote>

<hr />

<blockquote>
  <p><b> Singleton Pattern </b> 👤</p>
</blockquote>

<ul>
  <li>
    <p>싱글톤은 애플리케이션이 실행 된 이후 단 한개의 인스턴스만을 생성하고자 할 떄 사용하는 패턴이다.</p>
  </li>
  <li>
    <p>흔하게 쓰이는 디자인 패턴이며, 주로 환경설정과 같이 하나로 관리할 때 사용한다.</p>
  </li>
  <li>
    <p>C#에서는 싱글톤을 구현하는 방법이 여러가지가 있는데 이번 포스트에서 확인보자.</p>
  </li>
</ul>

<h4 id="1---unsafesingleton">1 - UnsafeSingleton</h4>
<ul>
  <li>기본적으로 다음과 같이 싱글톤을 구현할 수 있는데 이렇게 구현하게 되면 멀티스레드 환경에서 문제가 발생한다.<br />
두 개 이상의 스레드에서 인스턴스에 접근을 할 때 각기 다른 인스턴스가 생성될 수 있기 때문에 싱글톤에 위반되는 행위가 발생한다.</li>
</ul>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">UnsafeSingleton</span> <span class="p">:</span> <span class="n">Singleton</span>
<span class="p">{</span> 
	<span class="k">private</span> <span class="k">static</span> <span class="n">UnsafeSingleton</span> <span class="n">_instance</span><span class="p">;</span>

	<span class="k">public</span> <span class="k">static</span> <span class="n">UnsafeSingleton</span> <span class="n">Instance</span>
	<span class="p">{</span>
		<span class="k">get</span>
		<span class="p">{</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">_instance</span> <span class="k">is</span> <span class="k">null</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="n">_instance</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">UnsafeSingleton</span><span class="p">();</span>
			<span class="p">}</span>

			<span class="k">return</span> <span class="n">_instance</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span> 

	<span class="k">protected</span> <span class="nf">UnsafeSingleton</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Create UnsafeSingleton instance!!"</span><span class="p">);</span> 
<span class="p">}</span>
</code></pre></div></div>

<h4 id="2---safesingleton">2 - SafeSingleton</h4>
<ul>
  <li>1번은 스레드에 안전하지 않으므로 스레드에 안전하게 구현하면 2번과 같다.<br />
하지만 2번에도 문제가 있으니.. 인스턴스를 참조할 때 마다 lock으로 인해 성능이 떨어질 수가 있다.</li>
</ul>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">SafeSingleton</span> <span class="p">:</span> <span class="n">Singleton</span>
<span class="p">{</span>
	<span class="k">private</span> <span class="k">static</span> <span class="kt">object</span> <span class="n">_thislock</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">object</span><span class="p">();</span>
	<span class="k">private</span> <span class="k">static</span> <span class="n">SafeSingleton</span> <span class="n">_instance</span><span class="p">;</span>

	<span class="k">public</span> <span class="k">static</span> <span class="n">SafeSingleton</span> <span class="n">Instance</span>
	<span class="p">{</span>
		<span class="k">get</span>
		<span class="p">{</span>
			<span class="k">lock</span> <span class="p">(</span><span class="n">_thislock</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">_instance</span> <span class="k">is</span> <span class="k">null</span><span class="p">)</span>
				<span class="p">{</span>
					<span class="n">_instance</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SafeSingleton</span><span class="p">();</span>
				<span class="p">}</span>
			<span class="p">}</span>

			<span class="k">return</span> <span class="n">_instance</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">protected</span> <span class="nf">SafeSingleton</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Create SafeSingleton instance!!"</span><span class="p">);</span> 
<span class="p">}</span>
</code></pre></div></div>

<h4 id="3---dclsingleton">3 - DCLSingleton</h4>
<ul>
  <li>2번의 lock으로 인한 성능저하를 막고자 나온 방법이 Double Checked Lock이다.</li>
</ul>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Double Checked Locking</span>
<span class="k">class</span> <span class="nc">DCLSingleton</span> <span class="p">:</span> <span class="n">Singleton</span>
<span class="p">{</span>
	<span class="k">private</span> <span class="k">static</span> <span class="kt">object</span> <span class="n">_thislock</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">object</span><span class="p">();</span>
	<span class="k">private</span> <span class="k">static</span> <span class="n">DCLSingleton</span> <span class="n">_instance</span><span class="p">;</span>

	<span class="k">public</span> <span class="k">static</span> <span class="n">DCLSingleton</span> <span class="n">Instance</span>
	<span class="p">{</span>
		<span class="k">get</span>
		<span class="p">{</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">_instance</span> <span class="k">is</span> <span class="k">null</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="k">lock</span> <span class="p">(</span><span class="n">_thislock</span><span class="p">)</span>
				<span class="p">{</span>
					<span class="k">if</span> <span class="p">(</span><span class="n">_instance</span> <span class="k">is</span> <span class="k">null</span><span class="p">)</span>
					<span class="p">{</span>
						<span class="n">_instance</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DCLSingleton</span><span class="p">();</span>
					<span class="p">}</span>
				<span class="p">}</span>
			<span class="p">}</span>

			<span class="k">return</span> <span class="n">_instance</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">protected</span> <span class="nf">DCLSingleton</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Create DCLSingleton instance!!"</span><span class="p">);</span> 
<span class="p">}</span>
</code></pre></div></div>

<h4 id="4---staticsingleton">4 - StaticSingleton</h4>
<ul>
  <li>여담으로 static을 이용하여 구현할 수도 있다.</li>
</ul>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">class</span> <span class="nc">StaticSingleton</span> <span class="p">:</span> <span class="n">Singleton</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">StaticSingleton</span> <span class="n">_instance</span><span class="p">;</span>

        <span class="k">static</span> <span class="nf">StaticSingleton</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">_instance</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StaticSingleton</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">StaticSingleton</span> <span class="n">Instance</span> <span class="p">=&gt;</span> <span class="n">_instance</span><span class="p">;</span>

        <span class="k">protected</span> <span class="nf">StaticSingleton</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Create StaticSingleton instance!!"</span><span class="p">);</span> 
    <span class="p">}</span>
</code></pre></div></div>

<h4 id="5---lazysingleton">5 - LazySingleton</h4>
<ul>
  <li></li>
</ul>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">LazySingleton</span> <span class="p">:</span> <span class="n">Singleton</span>
<span class="p">{</span>
	<span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">Lazy</span><span class="p">&lt;</span><span class="n">LazySingleton</span><span class="p">&gt;</span> <span class="n">_instance</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Lazy</span><span class="p">&lt;</span><span class="n">LazySingleton</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">LazySingleton</span><span class="p">());</span>

	<span class="k">public</span> <span class="k">static</span> <span class="n">LazySingleton</span> <span class="n">Instance</span> <span class="p">=&gt;</span> <span class="n">_instance</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>

	<span class="k">protected</span> <span class="nf">LazySingleton</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Create LazySingleton instance!!"</span><span class="p">);</span> 
<span class="p">}</span> 
</code></pre></div></div>
:ET