I"{<h2 id="-제네릭메서드-안에서-객체-비교-문제-"><center> 제네릭메서드 안에서 객체 비교 문제 </center></h2>

<blockquote>
  <p><a href="https://github.com/chanos-dev/blogcode/tree/master/21-0602">Git Source</a></p>
</blockquote>

<hr />

<ul>
  <li>
    <p>저번 <a href="http://localhost:4000/string/">문자열 비교</a>에서 제네릭 메서드 안에서 string 타입을 비교할 때 object ==연산인 ReferenceEquals연산을 호출하는 것 같다고 했었다.</p>
  </li>
  <li>
    <p>MSDN에서 문서를 확인해본 결과 제네릭 제약조건에 class를 주는 경우 ==, != 연산 사용시 참조 값이 같은지만 확인한다고 나와있다. (object.ReferenceEquals 사용)<br />
그래서 string 타입을 제네릭 메서드에서 == 연산을 하면 false, .Equals 연산을 하면 true가 나온 이유…😂<br />
Equals를 재정의한 경우(string 클래스는 재정의가 되어있으니) 제네릭에서 Equals 연산을 하면 재정의한 메서드를 호출하기 때문에 된 것..</p>
  </li>
  <li>
    <p>서두가 조금 길었는데, 이 글의 요점은 제네릭 타입에서 참조가 아닌 값을 비교할 때 제네릭 제약조건을 비교 interface가 정의된 객체들만 허용하게끔 개발자들에게 알려주는 것이다.<br />
e.g) <code class="language-plaintext highlighter-rouge">IEquatable&lt;T&gt;</code>, <code class="language-plaintext highlighter-rouge">IComparer&lt;T&gt;</code></p>
  </li>
</ul>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">animals</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Animal</span><span class="p">&gt;()</span>
    <span class="p">{</span>
        <span class="k">new</span> <span class="nf">Animal</span><span class="p">(</span><span class="s">"Tiger"</span><span class="p">,</span> <span class="m">5</span><span class="p">),</span>
        <span class="k">new</span> <span class="nf">Animal</span><span class="p">(</span><span class="s">"Lion"</span><span class="p">,</span> <span class="m">8</span><span class="p">),</span>
        <span class="k">new</span> <span class="nf">Animal</span><span class="p">(</span><span class="s">"Tiger"</span><span class="p">,</span> <span class="m">6</span><span class="p">),</span>
        <span class="k">new</span> <span class="nf">Animal</span><span class="p">(</span><span class="s">"Tiger"</span><span class="p">,</span> <span class="m">4</span><span class="p">),</span>
    <span class="p">};</span>

    <span class="kt">var</span> <span class="n">tiger</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Animal</span><span class="p">(</span><span class="s">"Tiger"</span><span class="p">,</span> <span class="m">5</span><span class="p">);</span>

    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"Same Animal count : </span><span class="p">{</span><span class="nf">GetSameAnimal</span><span class="p">(</span><span class="n">tiger</span><span class="p">,</span> <span class="n">animals</span><span class="p">)}</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">private</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">GetSameAnimal</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">T</span> <span class="n">target</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">animals</span><span class="p">)</span>
    <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="n">IEquatable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span>
<span class="p">{</span>            
    <span class="k">return</span> <span class="n">animals</span><span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">animal</span> <span class="p">=&gt;</span> <span class="n">target</span><span class="p">.</span><span class="nf">Equals</span><span class="p">(</span><span class="n">animal</span><span class="p">)).</span><span class="nf">Count</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h2 id="reference">Reference</h2>

<p><a href="https://docs.microsoft.com/ko-kr/dotnet/csharp/programming-guide/generics/constraints-on-type-parameters" target="_blank">형식 매개 변수에 대한 제약 조건</a></p>
:ET