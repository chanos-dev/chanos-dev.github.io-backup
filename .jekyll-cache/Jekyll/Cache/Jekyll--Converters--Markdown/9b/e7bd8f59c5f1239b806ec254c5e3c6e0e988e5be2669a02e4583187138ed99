I"Z<h2 id="c-익명-타입"><center>[C#] 익명 타입</center></h2>

<blockquote>
  <p><a href="https://github.com/chanos-dev/blogcode/tree/master/21-0406">Git Source</a></p>
</blockquote>

<hr />

<blockquote>
  <p><b> 익명 타입 </b> 😎</p>
</blockquote>

<p>C# 3.0부터 클래스를 미리 정의하지 않고 사용할 수 있는 익명타입을 지원한다.</p>

<ul>
  <li>익명 타입 특징
    <ol>
      <li>읽기 전용이다. (할달 불가능)</li>
      <li>변수할당 시 타입은 <code class="language-plaintext highlighter-rouge">var</code></li>
      <li>new { 속성 : 값 } 형식으로 <code class="language-plaintext highlighter-rouge">Json</code> 형태와 비슷하다.</li>
      <li>매개변수로 전달이 불가하고 리턴 타입으로도 사용할 수 없다.</li>
    </ol>
  </li>
</ul>

<p>사용방법)</p>

<p><a href="http://localhost:4000/images/posts/2021-04-06/use1.png"><img src="http://localhost:4000/images/posts/2021-04-06/use1.png" alt="use1" /></a></p>
<ul>
  <li>컴파일러는 익명 타입에 대해 내부적으로 임의의 클래스를 생성한다.</li>
  <li>이미지와 같이 setter가 없고 getter만 있다.</li>
</ul>

<hr />

<p>컴파일러는 이전에 만든 익명 타입을 재사용하지만 조건이 있다.</p>
<ol>
  <li>동일한 어셈블리 내에 선언되어야한다.</li>
  <li>속성 이름과 타입이 일치해야 하며, 같은 순서로 선언되어야한다.</li>
</ol>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">person</span> <span class="p">=</span> <span class="k">new</span> <span class="p">{</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"홍길동"</span><span class="p">,</span> <span class="n">Age</span> <span class="p">=</span> <span class="m">24</span><span class="p">,</span> <span class="n">Address</span> <span class="p">=</span> <span class="s">"경기도 광주"</span> <span class="p">};</span>
<span class="kt">var</span> <span class="n">person2</span> <span class="p">=</span> <span class="k">new</span> <span class="p">{</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"홍길동"</span><span class="p">,</span> <span class="n">Address</span> <span class="p">=</span> <span class="s">"경기도 광주"</span><span class="p">,</span> <span class="n">Age</span> <span class="p">=</span> <span class="m">24</span> <span class="p">};</span>
<span class="c1">// 다음 두 인스턴스는 서로 다른 독립적인 익명타입을 생성한다.</span>
</code></pre></div></div>

<hr />

<p>Anonymous Type은 공식적으로 클래스를 정의할 필요 없이 Type을 간단히 임시로 만들어 사용할 때 유용하다. 특히 Anonymous Type은 LINQ를 사용할 때 많이 사용된다.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">var</span> <span class="n">cities</span> <span class="p">=</span> <span class="k">new</span><span class="p">[]</span>
<span class="p">{</span>
    <span class="k">new</span> <span class="p">{</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"Baek"</span><span class="p">,</span> <span class="n">Age</span> <span class="p">=</span> <span class="m">50</span><span class="p">,</span> <span class="n">Job</span> <span class="p">=</span> <span class="s">"Programmer"</span><span class="p">},</span>
    <span class="k">new</span> <span class="p">{</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"Lee"</span><span class="p">,</span> <span class="n">Age</span> <span class="p">=</span> <span class="m">20</span><span class="p">,</span> <span class="n">Job</span> <span class="p">=</span> <span class="s">"Chef"</span><span class="p">},</span>
    <span class="k">new</span> <span class="p">{</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"Park"</span><span class="p">,</span> <span class="n">Age</span> <span class="p">=</span> <span class="m">30</span><span class="p">,</span> <span class="n">Job</span> <span class="p">=</span> <span class="s">"Teacher"</span><span class="p">},</span>
    <span class="k">new</span> <span class="p">{</span> <span class="n">Name</span> <span class="p">=</span> <span class="s">"Choi"</span><span class="p">,</span> <span class="n">Age</span> <span class="p">=</span> <span class="m">40</span><span class="p">,</span> <span class="n">Job</span> <span class="p">=</span> <span class="s">"Docter"</span><span class="p">},</span>
<span class="p">};</span>

<span class="kt">var</span> <span class="n">lists</span> <span class="p">=</span> <span class="n">cities</span><span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">Age</span> <span class="p">&lt;=</span> <span class="m">30</span><span class="p">).</span><span class="nf">Select</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="p">{</span> <span class="n">c</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">c</span><span class="p">.</span><span class="n">Job</span> <span class="p">});</span>

<span class="k">foreach</span><span class="p">(</span><span class="kt">var</span> <span class="n">list</span> <span class="k">in</span> <span class="n">lists</span><span class="p">)</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"</span><span class="p">{</span><span class="n">list</span><span class="p">.</span><span class="n">Name</span><span class="p">}</span><span class="s"> is </span><span class="p">{</span><span class="n">list</span><span class="p">.</span><span class="n">Job</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>

<span class="c1">// Select() 메서드를 사용하여 일부 컬럼들로만 구성된 새 익명 타입을 만들어 리턴한다.</span>
</code></pre></div></div>
:ET