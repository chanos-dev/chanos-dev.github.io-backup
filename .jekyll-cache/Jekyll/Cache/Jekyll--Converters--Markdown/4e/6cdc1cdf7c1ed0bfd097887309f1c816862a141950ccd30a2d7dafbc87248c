I";<h2 id="c-idisposable"><center>C# IDisposable</center></h2>

<blockquote>
  <p><a href="https://github.com/chanos-dev/blogcode/tree/master/21-0804" target="_blank">Git Source</a></p>
</blockquote>

<hr />

<p>Finalizer를 선언하여 객체의 자원을 정리할 경우, 가비지 컬렉터의 메커니즘에 의해 객체의 제거 및 자원의 정리가 비결정적이라는 점을 해결하기 위해 제시된 방법이 IDisposable 패턴이다.</p>

<p>IDisposable 패턴이 구현된 객체는 using문을 이용할 수 있다.</p>

<p>using문을 이용하면 자동으로 해당 객체의 자원을 해제해주는 기능을 제공한다. (개발자에 의해 명시적 호출)</p>
<ul>
  <li>using문을 이용하지 않은 경우 개발자가 직접 Dispose메서드를 호출해줘야한다..</li>
</ul>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// using문을 벗어나면 자동적으로 foo.Dispose() 메서드 호출</span>
<span class="c1">// using문에 선언되는 객체가 Dispose 메서드가 없는 경우 컴파일 에러가 난다.</span>
<span class="k">using</span><span class="p">(</span><span class="kt">var</span> <span class="n">foo</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Foo</span><span class="p">())</span>
<span class="p">{</span>
    <span class="c1">//do something.</span>
<span class="p">}</span>

<span class="c1">// using을 사용하지 않은 경우</span>
<span class="k">try</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">foo</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Foo</span><span class="p">();</span>
    <span class="c1">// do something.</span>
<span class="p">}</span>
<span class="k">finally</span>
<span class="p">{</span>
    <span class="n">foo</span><span class="p">?.</span><span class="nf">Dispose</span><span class="p">();</span>
<span class="p">}</span>

</code></pre></div></div>

<p>IDisposable만 구현해준다면 Finalizer를 정의안해도 상관없을 것 같지만 그렇지 않다.</p>

<p>MSDN에서 제공되는 IDisposable 패턴의 표준 소스에도 Finalizer가 있는 것을 확인할 수 있다.</p>

<p>using문을 이용하여 개발자가 명시적으로 호출하는 경우 자원을 제때 정리할 수 있지만, using문 호출을 잊어버린 경우 CLR에서 호출할 수 있도록 Fianlizer를 정의하여(암시적 호출) 자원을 해제해줌으로 써 리소스 누수를 막을 수 있다.</p>

<p>그렇기에 귀찮더라도 Finalizer 메서드도 함께 정의한다.</p>

<blockquote>
  <p>구현</p>
</blockquote>

<p>기본적으로 객체에 IDisposable 인터페이스를 상속받으면 인텔리센스에서 MSDN이 제공하는 표준 IDisposable 패턴을 자동으로 구현할 수 있다. (대박)</p>

<p><a href="http://localhost:4000/images/posts/2021-08-04/idisposable.png"><img src="http://localhost:4000/images/posts/2021-08-04/idisposable.png" alt="idisposable" /></a></p>

<hr />

<h2 id="reference">Reference</h2>

<p><a href="https://docs.microsoft.com/ko-kr/dotnet/api/system.idisposable?view=net-5.0" target="_blank">MSDN - IDisposable 인터페이스</a></p>

<p><a href="http://www.simpleisbest.net/post/2011/08/22/Dispose-Pattern-Basic.aspx" target="_blank">Dispose 패턴</a></p>
:ET