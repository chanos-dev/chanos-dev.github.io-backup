I"*<h2 id="c-singleton-pattern"><center>[C#] Singleton Pattern</center></h2>

<blockquote>
  <p><a href="https://github.com/chanos-dev/blogcode/tree/master/21-0309">Git Source</a></p>
</blockquote>

<hr />

<blockquote>
  <p><b> Singleton Pattern </b> 👇</p>
</blockquote>

<ul>
  <li>각 숫자를 적절한 위치에 삽입을 하는 알고리즘</li>
  <li>삽입 정렬 같은 경우는 <code class="language-plaintext highlighter-rouge">필요할 때</code>만 위치를 바꾸게 됩니다.</li>
</ul>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">UnsafeSingleton</span> <span class="p">:</span> <span class="n">Singleton</span>
<span class="p">{</span> 
	<span class="k">private</span> <span class="k">static</span> <span class="n">UnsafeSingleton</span> <span class="n">_instance</span><span class="p">;</span>

	<span class="k">public</span> <span class="k">static</span> <span class="n">UnsafeSingleton</span> <span class="n">Instance</span>
	<span class="p">{</span>
		<span class="k">get</span>
		<span class="p">{</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">_instance</span> <span class="k">is</span> <span class="k">null</span><span class="p">)</span>
			<span class="p">{</span>
				<span class="n">_instance</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">UnsafeSingleton</span><span class="p">();</span>
			<span class="p">}</span>

			<span class="k">return</span> <span class="n">_instance</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span> 

	<span class="k">protected</span> <span class="nf">UnsafeSingleton</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Create UnsafeSingleton instance!!"</span><span class="p">);</span> 
<span class="p">}</span>
</code></pre></div></div>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">class</span> <span class="nc">SafeSingleton</span> <span class="p">:</span> <span class="n">Singleton</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">static</span> <span class="kt">object</span> <span class="n">_thislock</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">object</span><span class="p">();</span>
        <span class="k">private</span> <span class="k">static</span> <span class="n">SafeSingleton</span> <span class="n">_instance</span><span class="p">;</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">SafeSingleton</span> <span class="n">Instance</span>
        <span class="p">{</span>
            <span class="k">get</span>
            <span class="p">{</span>
                <span class="k">lock</span> <span class="p">(</span><span class="n">_thislock</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">_instance</span> <span class="k">is</span> <span class="k">null</span><span class="p">)</span>
                    <span class="p">{</span>
                        <span class="n">_instance</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SafeSingleton</span><span class="p">();</span>
                    <span class="p">}</span>
                <span class="p">}</span>

                <span class="k">return</span> <span class="n">_instance</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">protected</span> <span class="nf">SafeSingleton</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Create SafeSingleton instance!!"</span><span class="p">);</span>

        <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Print</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Print SafeSingleton!!"</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">//Double Checked Locking</span>
    <span class="k">class</span> <span class="nc">DCLSingleton</span> <span class="p">:</span> <span class="n">Singleton</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">static</span> <span class="kt">object</span> <span class="n">_thislock</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">object</span><span class="p">();</span>
        <span class="k">private</span> <span class="k">static</span> <span class="n">DCLSingleton</span> <span class="n">_instance</span><span class="p">;</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">DCLSingleton</span> <span class="n">Instance</span>
        <span class="p">{</span>
            <span class="k">get</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">_instance</span> <span class="k">is</span> <span class="k">null</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="k">lock</span> <span class="p">(</span><span class="n">_thislock</span><span class="p">)</span>
                    <span class="p">{</span>
                        <span class="k">if</span> <span class="p">(</span><span class="n">_instance</span> <span class="k">is</span> <span class="k">null</span><span class="p">)</span>
                        <span class="p">{</span>
                            <span class="n">_instance</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">DCLSingleton</span><span class="p">();</span>
                        <span class="p">}</span>
                    <span class="p">}</span>
                <span class="p">}</span>

                <span class="k">return</span> <span class="n">_instance</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">protected</span> <span class="nf">DCLSingleton</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Create DCLSingleton instance!!"</span><span class="p">);</span>

        <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Print</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Print DCLSingleton!!"</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">class</span> <span class="nc">StaticSingleton</span> <span class="p">:</span> <span class="n">Singleton</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">StaticSingleton</span> <span class="n">_instance</span><span class="p">;</span>

        <span class="k">static</span> <span class="nf">StaticSingleton</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">_instance</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">StaticSingleton</span><span class="p">();</span>
        <span class="p">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">StaticSingleton</span> <span class="n">Instance</span> <span class="p">=&gt;</span> <span class="n">_instance</span><span class="p">;</span>

        <span class="k">protected</span> <span class="nf">StaticSingleton</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Create StaticSingleton instance!!"</span><span class="p">);</span>

        <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Print</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Print StaticSingleton!!"</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">class</span> <span class="nc">LazySingleton</span> <span class="p">:</span> <span class="n">Singleton</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">Lazy</span><span class="p">&lt;</span><span class="n">LazySingleton</span><span class="p">&gt;</span> <span class="n">_instance</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Lazy</span><span class="p">&lt;</span><span class="n">LazySingleton</span><span class="p">&gt;(()</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">LazySingleton</span><span class="p">());</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">LazySingleton</span> <span class="n">Instance</span> <span class="p">=&gt;</span> <span class="n">_instance</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>

        <span class="k">protected</span> <span class="nf">LazySingleton</span><span class="p">()</span> <span class="p">=&gt;</span> <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Create LazySingleton instance!!"</span><span class="p">);</span>

        <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Print</span><span class="p">()</span>
        <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Print LazySingleton!!"</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
:ET