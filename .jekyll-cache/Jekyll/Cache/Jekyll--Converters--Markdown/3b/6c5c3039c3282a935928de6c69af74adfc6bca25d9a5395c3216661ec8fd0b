I"<h2 id="c-abstractinterface"><center>[C#] Abstract/Interface</center></h2>

<hr />

<h3 id="--abstract--">- Abstract -</h3>
<ul>
  <li>미완성된 클래스이다. (추상 메서드를 포함)</li>
  <li>목적은 여러 개의 자식 클래스에 공통적인 정의를 제공하는 것이다.</li>
  <li>생성자를 가질 수 있다.</li>
  <li>인스턴스화 할 수 없다.</li>
  <li>
    <p>멤버 변수 선언 가능하다.
```
class Program
{
  static void Main(string[] args)
  {
      Animal[] animals = new Animal[3];
      animals[0] = new Dog(“바둑이”, “진돗개”);
      animals[1] = new Cat(“초롱이”, “페르시안”);
      animals[2] = new Pigeon(“구구”, “바위”);</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  foreach (Animal animal in animals)
  {
      animal.GetInfo();
      animal.Sound();
      animal.Run();
      animal.Fly();
  }
</code></pre></div>    </div>

    <p>}
}</p>
  </li>
</ul>

<p>abstract class Animal
{     <br />
    protected string Name;
    protected string Type;</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public abstract void Run();
public abstract void Fly();
public abstract void Sound();

public void GetInfo()
{
    Console.WriteLine($"너의 이름은 {Name}, 종류는 {Type}!!");
}   }
</code></pre></div></div>

<p>class Dog : Animal
{
    public Dog(string name, string type)
    {
        Name = name;
        Type = type;
    }</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public override void Fly()
{
    Console.WriteLine("멍멍~! 못날아요~!");
}

public override void Run()
{
    Console.WriteLine("주인님 한테 달려가아~!");
}

public override void Sound()
{
    Console.WriteLine("멍멍!");
}
</code></pre></div></div>

<p>}</p>

<p>class Cat : Animal
{
    public Cat(string name, string type)
    {
        Name = name;
        Type = type;
    }</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public override void Fly()
{
    Console.WriteLine("냐옹~! 못날아요~!");
}

public override void Run()
{
    Console.WriteLine("상자 속으로 달려가아~!");
}

public override void Sound()
{
    Console.WriteLine("냐옹!");
} }
</code></pre></div></div>

<p>class Pigeon : Animal
{
    public Pigeon(string name, string type)
    {
        Name = name;
        Type = type;
    }</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public override void Fly()
{
    Console.WriteLine("하늘 위로..!!");
}

public override void Run()
{
    Console.WriteLine("구구~! 못달려요~!");
}

public override void Sound()
{
    Console.WriteLine("구구!");
} } ``` ``` 결과: 너의 이름은 바둑이, 종류는 진돗개!! 멍멍! 주인님 한테 달려가아~! 멍멍~! 못날아요~! 너의 이름은 초롱이, 종류는 페르시안!! 냐옹! 상자 속으로 달려가아~! 냐옹~! 못날아요~! 너의 이름은 구구, 종류는 바위!! 구구! 구구~! 못달려요~! 하늘 위로..!! ``` ---
</code></pre></div></div>

<h3 id="--interface--">- Interface -</h3>
<ul>
  <li></li>
</ul>

:ET