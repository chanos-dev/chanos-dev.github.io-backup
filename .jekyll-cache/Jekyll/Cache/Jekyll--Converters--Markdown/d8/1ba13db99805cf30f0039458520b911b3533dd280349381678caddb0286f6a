I"<h2 id="-객체-생성-"><center> 객체 생성 </center></h2>

<hr />

<ul>
  <li>C#에서 객체를 생성하는 방법에 대해서 알아보자. 여러가지 방법이 있지만 이번 포스트에서 소개할 방법은 Activator, Assembly,  FormatterServices클래스를 이용하여 생성하는 방법이다.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- Activator는 클래스 메서드인 CreateInstance를 사용한다.


- Assembly는 인스턴스 메서드인 CreateInstance를 사용한다.


- FormatterServices는 클래스 메서드인 GetUnititializedObject를 사용한다.
</code></pre></div></div>

<ul>
  <li>
    <p>FormatterServices 같은 경우는 새로운 객체를 메모리에 할당하지만 그 객체에 대하여 생성자를 호출하지 않는다. 그러나 그 객체의 모든 데이터는 null 또는 0으로 초기화가 된다.<br />
반면 Activator와 Assembly는 생성자가 있어야하고, 고로 파라미터를 넘겨 생성할 수 있다. public이 아닌 생성자는 BindingFlags를 이용해야한다.</p>
  </li>
  <li>
    <p>Assembly.CreateInstance를 디컴파일러로 까보면 결국엔 Activator를 호출하는 것을 확인할 수 있다.</p>
  </li>
  <li>
    <p>위 방법으로 객체를 생성하는 방법은, 런타임에서 객체의 타입 또는 객체 이름을 스트링 타입으로 가지고만 있어도 생성이 가능하다는 점이다.</p>
  </li>
</ul>

<hr />

<h2 id="reference">Reference</h2>

<p><a href="https://docs.microsoft.com/ko-kr/dotnet/api/system.reflection.assembly.createinstance?view=netcore-3.1" target="_blank">Activator 클래스 (System)</a>
<a href="https://docs.microsoft.com/ko-kr/dotnet/api/system.runtime.serialization.formatterservices?view=netcore-3.1" target="_blank">FormatterServices 클래스 (System.Runtime.Serialization)</a>
<a href="https://docs.microsoft.com/ko-kr/dotnet/api/system.activator?view=netcore-3.1" target="_blank">Assembly.CreateInstance 메서드 (System.Reflection)</a></p>
:ET