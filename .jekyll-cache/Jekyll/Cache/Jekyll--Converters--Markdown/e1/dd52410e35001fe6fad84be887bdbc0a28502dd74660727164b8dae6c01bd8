I"G<h2 id="algorithm-삽입-정렬"><center>[Algorithm] 삽입 정렬</center></h2>

<blockquote>
  <p><a href="https://github.com/chanos-dev/Algorithm-DataStructure/tree/master/DataStructure/0x01 Sort/InsertionSort">Git Source</a></p>
</blockquote>

<hr />

<blockquote>
  <p><b> Insertion Sort </b> 👇</p>
</blockquote>

<ul>
  <li>각 숫자를 적절한 위치에 삽입을 하는 알고리즘</li>
  <li>삽입 정렬 같은 경우는 <code class="language-plaintext highlighter-rouge">필요할 때</code>만 위치를 바꾸게 됩니다.</li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include&lt;iostream&gt;
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
	<span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">array</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">9</span><span class="p">};</span>
  
	<span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
        
		<span class="k">while</span><span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">array</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span>
		<span class="p">{</span>
			<span class="n">temp</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
			<span class="n">array</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
			<span class="n">array</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
			<span class="n">j</span><span class="o">--</span><span class="p">;</span>
			<span class="k">if</span><span class="p">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
		<span class="p">}</span>
  	<span class="p">}</span>
   
	<span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="s">" "</span><span class="p">;</span>
	<span class="p">}</span>
	
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>Insertion Sort</p>
</blockquote>

<ol>
  <li>
    <p><strong>1, 10, 5, 8, 7, 6, 4, 3, 2, 9</strong></p>
  </li>
  <li>
    <p><strong>1, 5, 10, 8, 7, 6, 4, 3, 2, 9</strong></p>
  </li>
  <li>
    <p><strong>1, 5, 8, 10, 7, 6, 4, 3, 2, 9</strong></p>
  </li>
  <li>
    <p><strong>1, 5, 7, 8, 10, 6, 4, 3, 2, 9</strong></p>
  </li>
  <li>
    <p><strong>1, 5, 6, 7, 8, 10, 4, 3, 2, 9</strong></p>
  </li>
  <li>
    <p><strong>1, 4, 5, 6, 7, 8, 10, 3, 2, 9</strong></p>
  </li>
  <li>
    <p><strong>1, 3, 4, 5, 6, 7, 8, 10, 2, 9</strong></p>
  </li>
  <li>
    <p><strong>1, 2, 3, 4, 5, 6, 7, 8, 10, 9</strong></p>
  </li>
  <li>
    <p><strong>1, 2, 3, 4, 5, 6, 7, 8, 9, 10</strong></p>
  </li>
</ol>

<ul>
  <li>삽입 정렬은 왼쪽이 이미 정렬이 되어있다는 가정하에 연산이 된다.</li>
  <li>만약 데이터가 거의 정렬된 상태라면 제일 효율적으로 연산이 이루어진다.</li>
  <li>삽입 정렬의 시간 복잡도는 <code class="language-plaintext highlighter-rouge">O(N^2)</code>이다.</li>
</ul>
:ET