I"t<h2 id="c-garbage-collector"><center>[C#] Garbage Collector</center></h2>

<blockquote>
  <p><a href="https://github.com/chanos-dev/blogcode/tree/master/21-0420">Git Source</a></p>
</blockquote>

<hr />

<blockquote>
  <p><b> Garbage Collector 기본 작동 방식 </b> 🧷</p>
</blockquote>

<p>닷넷의 가비지 컬렉터(이하 GC)을 살펴보기 전 GC가 없는 C/C++는 메모리 관리가 어떻게 되고 있는지 살펴보자.</p>

<p>C/C++ 환경에서의 메모리 할당/해제는 프로그래머의 몫으로, 힙에 자유메모리 블록을 런타임 라이브러리가 유지함으로써 관리되었다.</p>

<p>런타임 라이브러리는 힙 상에서 사용 가능한 메모리 블럭을 리스트로 유지하며, 메모리의 할당(new, malloc)이 있을 경우 해당 리스트에서 요청된 크기의 메모리 검색하여 찾으며 메모리가 해제(delete, free)되면 할당된 메모리는 다시 사용 가능한 메모리 리스트에 삽입된다.</p>

<blockquote>
  <p><b> 세대별 Garbage Collector </b> 🧷</p>
</blockquote>

<h2 id="reference">Reference</h2>

<p><a href="http://www.simpleisbest.net/post/2011/04/01/Review-NET-Garbage-Collection.aspx">가비지 컬렉션 다시 보기 Part I</a></p>

<p><a href="http://www.simpleisbest.net/post/2011/04/05/Generational-Garbage-Collection.aspx">가비지 컬렉션 다시 보기 Part II</a></p>
:ET