I"!<h2 id="c-static-class-singleton"><center>C# static class, singleton</center></h2>

<blockquote>
  <p><a href="https://github.com/chanos-dev/blogcode/tree/master/21-0918" target="_blank">Git Source</a></p>
</blockquote>

<hr />

<p>코드 작성 시 static class와 싱글톤패턴을 사용하는 경우가 있는데 어떠한 차이점이 있는지 살펴보고자 포스트를 작성하게 됐다.</p>

<p>일단, 싱글톤패턴은 하나의 인스턴스를 만들어 재사용하는 것이고 static class는 인스턴스를 생성하지 않고 클래스명으로 바로 접근하여 사용하는 것이다.</p>

<p>비슷한 점으로는 외부에서 new 키워드를 이용하여 따로 인스턴스를 생성하지 않고 사용한다는 것과 정적 클래스 및 정적 변수를 사용함으로서 high-frequency heap에 할당되며 GC가 일어나지 않는다.</p>

<p>차이점은 다음과 같다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">차이점</th>
      <th style="text-align: left">싱글톤패턴</th>
      <th style="text-align: left">static class</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">원리</td>
      <td style="text-align: left">하나의 인스턴스 생성 후 재사용</td>
      <td style="text-align: left">인스턴스를 생성하지 않고 사용</td>
    </tr>
    <tr>
      <td style="text-align: left">인터페이스 구현 <br />및<br />클래스 상속</td>
      <td style="text-align: left">가능</td>
      <td style="text-align: left">불가능</td>
    </tr>
    <tr>
      <td style="text-align: left">객체지향 패러다임을 따르는가</td>
      <td style="text-align: left">O</td>
      <td style="text-align: left">X</td>
    </tr>
    <tr>
      <td style="text-align: left">초기화</td>
      <td style="text-align: left"> </td>
      <td style="text-align: left"> </td>
    </tr>
  </tbody>
</table>

<p>C#에서는 정적 클래스의 인스턴스를 만들 수 없습니다. 그러나 싱글톤 클래스의 단일 인스턴스를 만든 다음 해당 싱글톤 인스턴스를 재사용할 수 있습니다.</p>

<p>컴파일러가 정적 클래스를 컴파일할 때 내부적으로 정적 클래스를 추상 및 봉인된 클래스로 취급합니다. 이것이 C#에서 인스턴스를 생성하거나 정적 클래스를 확장하지 않는 이유입니다.</p>

<p>Singleton 클래스 생성자는 항상 private로 표시됩니다. 이것이 싱글톤 클래스 외부에서 인스턴스를 생성할 수 없는 이유입니다. 싱글톤 인스턴스를 한 번만 생성한 다음 싱글톤 클래스 외부에서 해당 공용 정적 속성/메서드를 호출할 때마다 해당 싱글톤 인스턴스를 반환하는 작업을 수행하는 공용 정적 속성 또는 공용 정적 메서드를 제공합니다.</p>

<p>Singleton 클래스는 느리게 초기화되거나 Singleton 클래스를 포함하는 프로그램이나 네임스페이스가 로드될 때 CLR(공용 언어 런타임)에 의해 자동으로 로드될 수 있습니다. 정적 클래스는 일반적으로 처음 로드될 때 초기화되며 잠재적인 클래스 로더 문제가 발생할 수 있습니다.</p>

<p>정적 클래스를 메서드 매개 변수로 전달할 수는 없지만 C#에서는 싱글톤 인스턴스를 메서드 매개 변수로 전달할 수 있습니다.</p>

<p>C#에서는 인터페이스를 구현하고 다른 클래스에서 상속하며 Singleton 클래스로 상속을 허용할 수 있습니다.</p>

<p>정적 클래스에서는 불가능합니다. 따라서 Singleton 클래스는 정적 클래스에 비해 더 유연합니다.</p>

<p>Singleton 클래스 객체를 복제할 수 있지만 정적 클래스는 복제할 수 없습니다.</p>

<p>싱글톤 클래스의 객체는 처분할 수 있지만 정적 클래스는 처분할 수 없습니다.</p>

<p>정적 클래스는 인터페이스 기반이 아니기 때문에 정적 클래스를 사용하여 종속성 주입 디자인 패턴을 구현할 수 없습니다.</p>

<p>싱글톤은 애플리케이션 수명 주기 전반에 걸쳐 단일 개체를 의미하므로 범위는 애플리케이션 수준에 있습니다. 정적 클래스에는 개체 포인터가 없다는 것을 알고 있으므로 범위는 앱 도메인 수준에 있습니다.</p>
:ET