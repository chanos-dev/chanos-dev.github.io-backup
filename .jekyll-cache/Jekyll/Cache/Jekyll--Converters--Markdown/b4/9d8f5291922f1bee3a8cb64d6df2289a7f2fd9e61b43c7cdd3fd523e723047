I"3<h2 id="-캡처-변수-"><center> 캡처 변수 </center></h2>

<blockquote>
  <p><a href="https://github.com/chanos-dev/blogcode/tree/master/21-0609">Git Source</a></p>
</blockquote>

<hr />

<ul>
  <li>
    <p>람다식 등을 구현할 때 로컬변수를 사용하는 경우, 이를 클로저(Closure)라 부르는데 로컬변수를 사용하는 경우 캡처 변수라는 것을 주의해야한다. ⚠</p>
  </li>
  <li>다음 코드를 살펴보면 개발자가 기대한 값이 0, 1, 2, 3, 4 이지만 실제 실행하여 결과를 확인하면 5, 5, 5, 5, 5가 출력되는 것을 확인할 수 있다.
    <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">var</span> <span class="n">actions</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Action</span><span class="p">&gt;();</span>

  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">idx</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">idx</span> <span class="p">&lt;</span> <span class="m">5</span><span class="p">;</span> <span class="n">idx</span><span class="p">++)</span>
  <span class="p">{</span> 
      <span class="n">actions</span><span class="p">.</span><span class="nf">Add</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">idx</span><span class="p">));</span>
  <span class="p">}</span>

  <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">action</span> <span class="k">in</span> <span class="n">actions</span><span class="p">)</span>
  <span class="p">{</span>
      <span class="n">action</span><span class="p">.</span><span class="nf">Invoke</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>이를 해결해주기 위해서는 for문 scope안에 새로운 로컬변수를 할당하여 대리자에 넘겨주어야 한다. 이를 반영하여 수정한 코드는 다음과 같을 것이다.
    <div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">var</span> <span class="n">actions</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Action</span><span class="p">&gt;();</span>

  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">idx</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">idx</span> <span class="p">&lt;</span> <span class="m">5</span><span class="p">;</span> <span class="n">idx</span><span class="p">++)</span>
  <span class="p">{</span> 
      <span class="kt">int</span> <span class="n">temp</span> <span class="p">=</span> <span class="n">idx</span><span class="p">;</span>
      <span class="n">actions</span><span class="p">.</span><span class="nf">Add</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">temp</span><span class="p">));</span>
  <span class="p">}</span>

  <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">action</span> <span class="k">in</span> <span class="n">actions</span><span class="p">)</span>
  <span class="p">{</span>
      <span class="n">action</span><span class="p">.</span><span class="nf">Invoke</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>위 코드를 실행하면 정상적으로 기대한 값이 출력되는 것을 확인할 수 있다.</p>
  </li>
  <li>
    <p>🤔 얼핏 보기엔 로컬 변수 idx가 값 복사가 이루어져 대리자에 넘어가는 것이 아닌가 싶지만, 클로저를 사용하게되면 동작방식이 다르다.</p>
  </li>
  <li>
    <p>Reference에 있는 article을 살펴보면, 람다식에 사용되는 변수는 컴파일러로 인해 따로 익명의 private 클래스의 멤버 변수로 옮겨지고 람다식의 내용도 그 클래스의 메서드로 옮겨지게 된다.</p>
  </li>
  <li>
    <p>이에 따라 처음에 작성했던 코드는 컴파일러에 의해 다음과 같이 변경이 된다.
```c#
class ComplierClass
{
  public int _i;</p>

    <p>public void _method()
  {
      Console.WriteLine(_i);
  }
}</p>
  </li>
</ul>

<p>static void Main(string[] args)
{<br />
    var actions = new List<Action>();</Action></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ComplierClass complier = new ComplierClass();
 
for (int complier._i = 0; complier._i &lt; 5; complier._i++)
{  
    actions.Add(complier._method);
}
 
foreach(var act in actions)
{
    act.Invoke();
} } ```
</code></pre></div></div>

<ul>
  <li>for문 scope 밖에서 임시객체가 생성이되고, for문 안에서 임시객체의 _i 맴버에 계속 대입을 해주니 기대했던 값과 다르게 나온 것이다.</li>
</ul>

<hr />

<h2 id="reference">Reference</h2>

<p><a href="https://www.codeproject.com/Articles/15624/Inside-C-2-0-Anonymous-Methods#4" target="_blank">Codeproject Inside C# 2.0 Anonymous Methods</a></p>

<p><a href="https://www.sysnet.pe.kr/2/0/10817" target="_blank">.NET Framework: 523. C# 람다(Lambda)에서 변수 캡쳐 방식</a></p>
:ET